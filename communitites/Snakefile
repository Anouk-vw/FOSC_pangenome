ruleorder: plot_com > plot_heatmap > community_counts
'''
snakefile to determine optimal parameter setting
Run different combinations of parameters to determine best communitites
'''
configfile: './config.yaml'

param_P = config['P']
param_S = config['S']
param_L = config['L']
param_H = config['H']
#additional = ['']

infa = config['genome_dir']

rule all:
	input: 
		#expand('{outdir}/{p}-{s}-{l}-{h}/out.paf', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),
		expand('{outdir}/{p}-{s}-{l}-{h}/out.paf.edges.list.txt', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),
		expand('{outdir}/{p}-{s}-{l}-{h}/out.paf.edges.list.txt', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),
		expand('{outdir}/{p}-{s}-{l}-{h}/out.paf.edges.weights.txt.communities.png', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),
		expand('{outdir}/{p}-{s}-{l}-{h}/community_counts.txt', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),
		expand('{outdir}/{p}-{s}-{l}-{h}/community_count_dist.png', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),
		expand('{outdir}/{p}-{s}-{l}-{h}/heatmap.pdf', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),
		expand('{outdir}/{p}-{s}-{l}-{h}/heatmap.csv', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),
		expand('{outdir}/{p}-{s}-{l}-{h}/gephi_nodes.csv', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),
		expand('{outdir}/{p}-{s}-{l}-{h}/plot_tascomm.paf', p = param_P, s= param_S, l = param_L, h = param_H, outdir = config['outdir']),

rule wfmash:
	input:
		fasta = infa
	output:
		'{p}-{s}-{l}-{h}/out.paf'
	params:
		num_genomes = config['num_genomes']
	shell:
		'wfmash {input.fasta} -p {wildcards.p} -s {wildcards.s} -l {wildcards.l} -n {params.num_genomes} -X -t 10 -m -H {wildcards.h} > {output}'

rule plot_com:
	input:
		'{p}-{s}-{l}-{h}/out.paf'
	output:
		files = '{p}-{s}-{l}-{h}/out.paf.edges.list.txt',
		plot = '{p}-{s}-{l}-{h}/out.paf.edges.weights.txt.communities.png'
	params:
		direct = '{p}-{s}-{l}-{h}',
	shell:
		'''
		python ~/anouk2/MPI/scripts/paf2net.py -p {input}
		python ~/anouk2/MPI/scripts/net2communities.py -e {input}.edges.list.txt -w {input}.edges.weights.txt -n {input}.vertices.id2name.txt --plot
		'''

rule plot_heatmap:
	input:
		'{p}-{s}-{l}-{h}/out.paf'
	output:
		#files = '{p}-{s}-{l}-{h}/out.paf_chr_table.txt',
		heatmap = '{p}-{s}-{l}-{h}/heatmap.pdf',
		csv = '{p}-{s}-{l}-{h}/heatmap.csv'
	params:
		'{p}-{s}-{l}-{h}/heatmap'
	shell:
		'''
		python3 get_table_about_communities.py {input}.edges.weights.txt.community.*.txt {params}
		'''
		#python3 plot_table.py {input}_chr_table.txt {output.files}
		
rule community_counts:
	input:
		'{p}-{s}-{l}-{h}/out.paf'
	output:
		'{p}-{s}-{l}-{h}/community_counts.txt'
	shell:
		'wc -l {input}.edges.weights.txt.community.*.txt > {output}'

rule plot_dist:
	input:
		'{p}-{s}-{l}-{h}/community_counts.txt'
	output:
		'{p}-{s}-{l}-{h}/community_count_dist.png'
	shell:
		'python3 plot_distribution.py {input} {output}'
		
rule get_gephi:
	input:
		'{p}-{s}-{l}-{h}/community_counts.txt'
	output:
		gephi = '{p}-{s}-{l}-{h}/gephi_nodes.csv',
		pafs= '{p}-{s}-{l}-{h}/plot_tascomm.paf'
	params:
		'{p}-{s}-{l}-{h}'
	shell:
		'python ../scripts/analyse_communities.py {params}'

"""
seq 0 14 | while read i
    do chromosomes=$(cat ${out}.paf.edges.weights.txt.community.$i.txt | cut -f 3 -d '#' | sort | uniq | tr '\n' ' ');
    echo "community $i --> $chromosomes"; done >> ${out}.coms.txt 

"""
